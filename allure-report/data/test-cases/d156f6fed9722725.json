{"uid":"d156f6fed9722725","name":"test_tc_tb_cust_05[customer_test_case0]","fullName":"tests.test_TC_TB_CUST_05#test_tc_tb_cust_05","historyId":"4dba0caf79390da98e32e00c8ebc1e60","time":{"start":1755458232265,"stop":1755458233130,"duration":865},"status":"failed","statusMessage":"Failed: Initial Deposit Validation message did not match expected.","statusTrace":"browser_config = (<selenium.webdriver.firefox.webdriver.WebDriver (session=\"9194265f-a1d8-497b-8c51-0dd9c845d72e\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"9194265f-a1d8-497b-8c51-0dd9c845d72e\")>)\ncustomer_test_case = {'customer_email': 'johndoe@gmail.com', 'customer_full_name': 'John Doe', 'customer_password': '123456', 'expected_validation_message': 'Value must be greater than or equal to 10.', ...}\n\n    @pytest.mark.parametrize(\n        \"customer_test_case\",\n        [get_test_case(\"customer_test_data.json\", \"invalid_customers\", 2)]  # index 2 → John Doe\n    ) #connecting data loader\n    \n    \n    def test_tc_tb_cust_05(browser_config,customer_test_case):\n        logging.info(\"TC_TB_CUST_05 Started..\")\n        driver, wait = browser_config\n    \n        # Create object for customer register page class\n        customer_register_page = CustomerRegisterPage(driver,wait)\n    \n        try:\n            customer_register_page.click_open_your_account_button()\n            logging.info(\"Click on Open Your Account Button successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Open Your Account' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Open Your Account Button !!!\")\n    \n        # Enter Customer Full name field\n        try:\n            customer_register_page.enter_customer_full_name(customer_test_case[\"customer_full_name\"])\n            logging.info(\"Customer Full Name entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Full Name Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Full Name Field !!!\")\n    \n        # Enter Customer Email Address field\n        try:\n            customer_register_page.enter_customer_email(customer_test_case[\"customer_email\"])\n            logging.info(\"Customer Email Address entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Email Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Email Field !!!\")\n    \n        # Enter Customer Password Field\n        try:\n            customer_register_page.enter_customer_password(customer_test_case[\"customer_password\"])\n            logging.info(\"Customer Password Enter successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Password Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Password Field !!!\")\n    \n        # Enter Customer Initial Deposit Field\n        try:\n            customer_register_page.enter_initial_deposit(customer_test_case[\"initial_deposit\"])\n            logging.info(\"Customer Initial Deposit Entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Initial Deposit ' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Initial Deposit Field !!!\")\n    \n        # Click on Register Button\n        try:\n            customer_register_page.click_register_button()\n            logging.info(\"Click on Register button successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element in Customer 'Register' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer 'Register' Button !!!\")\n    \n        # Grab validation message in Initial Deposit separately\n        try:\n            validation_message = customer_register_page.get_validation_message(\"#initialDepositReg\")\n            expected_message = customer_test_case[\"expected_validation_message\"]\n    \n            if validation_message == expected_message:\n                logging.info(f\"Test Passed. Initial Deposit Validation message matched: '{validation_message}'\")\n            else:\n                logging.info(f\"Test Failed. Expected: '{expected_message}', Actual: '{validation_message}'\")\n                capture_full_page_screenshot(driver, \"BUG_TC_TB_CUST_04\")\n>               pytest.fail(\"Initial Deposit Validation message did not match expected.\")\nE               Failed: Initial Deposit Validation message did not match expected.\n\ntests\\test_TC_TB_CUST_05.py:85: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_config","time":{"start":1755458222075,"stop":1755458232264,"duration":10189},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: Initial Deposit Validation message did not match expected.","statusTrace":"browser_config = (<selenium.webdriver.firefox.webdriver.WebDriver (session=\"9194265f-a1d8-497b-8c51-0dd9c845d72e\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"9194265f-a1d8-497b-8c51-0dd9c845d72e\")>)\ncustomer_test_case = {'customer_email': 'johndoe@gmail.com', 'customer_full_name': 'John Doe', 'customer_password': '123456', 'expected_validation_message': 'Value must be greater than or equal to 10.', ...}\n\n    @pytest.mark.parametrize(\n        \"customer_test_case\",\n        [get_test_case(\"customer_test_data.json\", \"invalid_customers\", 2)]  # index 2 → John Doe\n    ) #connecting data loader\n    \n    \n    def test_tc_tb_cust_05(browser_config,customer_test_case):\n        logging.info(\"TC_TB_CUST_05 Started..\")\n        driver, wait = browser_config\n    \n        # Create object for customer register page class\n        customer_register_page = CustomerRegisterPage(driver,wait)\n    \n        try:\n            customer_register_page.click_open_your_account_button()\n            logging.info(\"Click on Open Your Account Button successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Open Your Account' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Open Your Account Button !!!\")\n    \n        # Enter Customer Full name field\n        try:\n            customer_register_page.enter_customer_full_name(customer_test_case[\"customer_full_name\"])\n            logging.info(\"Customer Full Name entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Full Name Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Full Name Field !!!\")\n    \n        # Enter Customer Email Address field\n        try:\n            customer_register_page.enter_customer_email(customer_test_case[\"customer_email\"])\n            logging.info(\"Customer Email Address entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Email Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Email Field !!!\")\n    \n        # Enter Customer Password Field\n        try:\n            customer_register_page.enter_customer_password(customer_test_case[\"customer_password\"])\n            logging.info(\"Customer Password Enter successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Password Field' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Password Field !!!\")\n    \n        # Enter Customer Initial Deposit Field\n        try:\n            customer_register_page.enter_initial_deposit(customer_test_case[\"initial_deposit\"])\n            logging.info(\"Customer Initial Deposit Entered successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element 'Customer Initial Deposit ' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer Initial Deposit Field !!!\")\n    \n        # Click on Register Button\n        try:\n            customer_register_page.click_register_button()\n            logging.info(\"Click on Register button successfully.\")\n    \n        except Exception as e:\n            logging.info(\"Element in Customer 'Register' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Customer 'Register' Button !!!\")\n    \n        # Grab validation message in Initial Deposit separately\n        try:\n            validation_message = customer_register_page.get_validation_message(\"#initialDepositReg\")\n            expected_message = customer_test_case[\"expected_validation_message\"]\n    \n            if validation_message == expected_message:\n                logging.info(f\"Test Passed. Initial Deposit Validation message matched: '{validation_message}'\")\n            else:\n                logging.info(f\"Test Failed. Expected: '{expected_message}', Actual: '{validation_message}'\")\n                capture_full_page_screenshot(driver, \"BUG_TC_TB_CUST_04\")\n>               pytest.fail(\"Initial Deposit Validation message did not match expected.\")\nE               Failed: Initial Deposit Validation message did not match expected.\n\ntests\\test_TC_TB_CUST_05.py:85: Failed","steps":[],"attachments":[{"uid":"7df7d3135d1f16a","name":"log","source":"7df7d3135d1f16a.txt","type":"text/plain","size":1234}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"browser_config::0","time":{"start":1755458233142,"stop":1755458236756,"duration":3614},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_TC_TB_CUST_05"},{"name":"host","value":"DESKTOP-6EVDAM2"},{"name":"thread","value":"6680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_TC_TB_CUST_05"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"customer_test_case","value":"{'customer_full_name': 'John Doe', 'customer_email': 'johndoe@gmail.com', 'customer_password': '123456', 'initial_deposit': '9', 'expected_validation_message': 'Value must be greater than or equal to 10.'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d156f6fed9722725.json","parameterValues":["{'customer_full_name': 'John Doe', 'customer_email': 'johndoe@gmail.com', 'customer_password': '123456', 'initial_deposit': '9', 'expected_validation_message': 'Value must be greater than or equal to 10.'}"]}